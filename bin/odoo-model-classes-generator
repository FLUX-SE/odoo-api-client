#!/usr/bin/env php
<?php

declare(strict_types=1);

if (is_file(__DIR__.'/../../../autoload.php') === true) {
    require __DIR__.'/../../../autoload.php';
} else {
    require __DIR__ . '/../vendor/autoload.php';
}

use FluxSE\OdooApiClient\Builder\OdooApiClientBuilder;
use FluxSE\OdooApiClient\Command\GeneratorCommand;
use FluxSE\OdooApiClient\Operations\Object\ExecuteKw\InspectionOperations;
use FluxSE\OdooApiClient\Operations\Object\ExecuteKw\RecordListOperations;
use FluxSE\OdooApiClient\PhpGenerator\Builder\SerializableClassBuilder;
use FluxSE\OdooApiClient\PhpGenerator\ModelFixer\BaseIdFixer;
use FluxSE\OdooApiClient\PhpGenerator\OdooModelsStructureConverter;
use FluxSE\OdooApiClient\PhpGenerator\OdooPhpClassesGenerator;
use Prometee\PhpClassGenerator\Builder\Model\ModelFactoryBuilder;
use Prometee\PhpClassGenerator\Builder\View\ViewFactoryBuilder;
use Prometee\PhpClassGenerator\Helper\PhpReservedWordsHelper;
use Symfony\Component\Console\Application;

$phpGenerator = new OdooPhpClassesGenerator(
    new SerializableClassBuilder(
        new ModelFactoryBuilder(),
        new ViewFactoryBuilder()
    ),
);

$odooApiHost = getenv('ODOO_API_HOST') ?: 'http://localhost:8069';
$odooApiDatabase = getenv('ODOO_API_DATABASE') ?: 'odoo-master';
$odooApiUsername = getenv('ODOO_API_USERNAME') ?: 'admin';
$odooApiPassword = getenv('ODOO_API_PASSWORD') ?: 'admin';

$odooApiClientBuilder = new OdooApiClientBuilder($odooApiHost);
/** @var RecordListOperations $recordListOperations */
$recordListOperations = $odooApiClientBuilder->buildExecuteKwOperations(
    RecordListOperations::class,
    $odooApiDatabase,
    $odooApiUsername,
    $odooApiPassword
);
/** @var InspectionOperations $inspectionOperations */
$inspectionOperations = $odooApiClientBuilder->buildExecuteKwOperations(
    InspectionOperations::class,
    $odooApiDatabase,
    $odooApiUsername,
    $odooApiPassword
);

$phpReservedWordsHelper = new PhpReservedWordsHelper();
$odooModelsStructureConverter = new OdooModelsStructureConverter(
    $recordListOperations,
    $inspectionOperations,
    $phpReservedWordsHelper,
    [
        new BaseIdFixer(),
    ]
);

$application = new Application('odoo-model-classes-generator', '1.0.0');
$command = new GeneratorCommand(
    $inspectionOperations->getObjectOperations(),
    $odooModelsStructureConverter,
    $phpGenerator,
    'vendor/bin/odoo-model-classes-generator'
);

$application->add($command);

$application->setDefaultCommand($command->getName(), true);
$application->run();