<?php

declare(strict_types=1);

namespace Flux\OdooApiClient\Model\Object\Utm;

use DateTimeInterface;
use Flux\OdooApiClient\Model\Object\Base;
use Flux\OdooApiClient\Model\Object\Res\Company;
use Flux\OdooApiClient\Model\Object\Res\Currency;
use Flux\OdooApiClient\Model\Object\Res\Users;

/**
 * Odoo model : utm.campaign
 * Name : utm.campaign
 * Info :
 * Main super-class for regular database-persisted Odoo models.
 *
 * Odoo models are created by inheriting from this class::
 *
 * class user(Model):
 * ...
 *
 * The system will later instantiate the class once per database (on
 * which the class' module is installed).
 */
final class Campaign extends Base
{
    /**
     * Campaign Name
     *
     * @var string
     */
    private $name;

    /**
     * Responsible
     *
     * @var Users
     */
    private $user_id;

    /**
     * Stage
     *
     * @var Stage
     */
    private $stage_id;

    /**
     * Tags
     *
     * @var null|Tag[]
     */
    private $tag_ids;

    /**
     * Is Website
     * Allows us to filter relevant Campaign
     *
     * @var null|bool
     */
    private $is_website;

    /**
     * Color Index
     *
     * @var null|int
     */
    private $color;

    /**
     * Quotation Count
     *
     * @var null|int
     */
    private $quotation_count;

    /**
     * Revenues generated by the campaign
     *
     * @var null|int
     */
    private $invoiced_amount;

    /**
     * Company
     *
     * @var null|Company
     */
    private $company_id;

    /**
     * Currency
     *
     * @var null|Currency
     */
    private $currency_id;

    /**
     * Created by
     *
     * @var null|Users
     */
    private $create_uid;

    /**
     * Created on
     *
     * @var null|DateTimeInterface
     */
    private $create_date;

    /**
     * Last Updated by
     *
     * @var null|Users
     */
    private $write_uid;

    /**
     * Last Updated on
     *
     * @var null|DateTimeInterface
     */
    private $write_date;

    /**
     * @param string $name Campaign Name
     * @param Users $user_id Responsible
     * @param Stage $stage_id Stage
     */
    public function __construct(string $name, Users $user_id, Stage $stage_id)
    {
        $this->name = $name;
        $this->user_id = $user_id;
        $this->stage_id = $stage_id;
    }

    /**
     * @return null|int
     */
    public function getQuotationCount(): ?int
    {
        return $this->quotation_count;
    }

    /**
     * @return null|Users
     */
    public function getWriteUid(): ?Users
    {
        return $this->write_uid;
    }

    /**
     * @return null|DateTimeInterface
     */
    public function getCreateDate(): ?DateTimeInterface
    {
        return $this->create_date;
    }

    /**
     * @return null|Users
     */
    public function getCreateUid(): ?Users
    {
        return $this->create_uid;
    }

    /**
     * @return null|Currency
     */
    public function getCurrencyId(): ?Currency
    {
        return $this->currency_id;
    }

    /**
     * @return null|Company
     */
    public function getCompanyId(): ?Company
    {
        return $this->company_id;
    }

    /**
     * @return null|int
     */
    public function getInvoicedAmount(): ?int
    {
        return $this->invoiced_amount;
    }

    /**
     * @param null|int $color
     */
    public function setColor(?int $color): void
    {
        $this->color = $color;
    }

    /**
     * @param string $name
     */
    public function setName(string $name): void
    {
        $this->name = $name;
    }

    /**
     * @param null|bool $is_website
     */
    public function setIsWebsite(?bool $is_website): void
    {
        $this->is_website = $is_website;
    }

    /**
     * @param Tag $item
     */
    public function removeTagIds(Tag $item): void
    {
        if (null === $this->tag_ids) {
            $this->tag_ids = [];
        }

        if ($this->hasTagIds($item)) {
            $index = array_search($item, $this->tag_ids);
            unset($this->tag_ids[$index]);
        }
    }

    /**
     * @param Tag $item
     */
    public function addTagIds(Tag $item): void
    {
        if ($this->hasTagIds($item)) {
            return;
        }

        if (null === $this->tag_ids) {
            $this->tag_ids = [];
        }

        $this->tag_ids[] = $item;
    }

    /**
     * @param Tag $item
     * @param bool $strict
     *
     * @return bool
     */
    public function hasTagIds(Tag $item, bool $strict = true): bool
    {
        if (null === $this->tag_ids) {
            return false;
        }

        return in_array($item, $this->tag_ids, $strict);
    }

    /**
     * @param null|Tag[] $tag_ids
     */
    public function setTagIds(?array $tag_ids): void
    {
        $this->tag_ids = $tag_ids;
    }

    /**
     * @param Stage $stage_id
     */
    public function setStageId(Stage $stage_id): void
    {
        $this->stage_id = $stage_id;
    }

    /**
     * @param Users $user_id
     */
    public function setUserId(Users $user_id): void
    {
        $this->user_id = $user_id;
    }

    /**
     * @return null|DateTimeInterface
     */
    public function getWriteDate(): ?DateTimeInterface
    {
        return $this->write_date;
    }
}
