<?php

declare(strict_types=1);

namespace Flux\OdooApiClient\Model\Object\Stock\Warehouse;

use DateTimeInterface;
use Flux\OdooApiClient\Model\Object\Base;
use Flux\OdooApiClient\Model\OdooRelation;

/**
 * Odoo model : stock.warehouse.orderpoint
 * ---
 * Name : stock.warehouse.orderpoint
 * ---
 * Info :
 * Defines Minimum stock rules.
 */
final class Orderpoint extends Base
{
    /**
     * Name
     * ---
     * Searchable : yes
     * Sortable : yes
     *
     * @var string
     */
    private $name;

    /**
     * Active
     * ---
     * If the active field is set to False, it will allow you to hide the orderpoint without removing it.
     * ---
     * Searchable : yes
     * Sortable : yes
     *
     * @var bool|null
     */
    private $active;

    /**
     * Warehouse
     * ---
     * Relation : many2one (stock.warehouse)
     * @see \Flux\OdooApiClient\Model\Object\Stock\Warehouse
     * ---
     * Searchable : yes
     * Sortable : yes
     *
     * @var OdooRelation
     */
    private $warehouse_id;

    /**
     * Location
     * ---
     * Relation : many2one (stock.location)
     * @see \Flux\OdooApiClient\Model\Object\Stock\Location
     * ---
     * Searchable : yes
     * Sortable : yes
     *
     * @var OdooRelation
     */
    private $location_id;

    /**
     * Product
     * ---
     * Relation : many2one (product.product)
     * @see \Flux\OdooApiClient\Model\Object\Product\Product
     * ---
     * Searchable : yes
     * Sortable : yes
     *
     * @var OdooRelation
     */
    private $product_id;

    /**
     * Unit of Measure
     * ---
     * Default unit of measure used for all stock operations.
     * ---
     * Relation : many2one (uom.uom)
     * @see \Flux\OdooApiClient\Model\Object\Uom\Uom
     * ---
     * Searchable : yes
     * Sortable : no
     *
     * @var OdooRelation
     */
    private $product_uom;

    /**
     * Product unit of measure label
     * ---
     * Searchable : no
     * Sortable : no
     *
     * @var string|null
     */
    private $product_uom_name;

    /**
     * Minimum Quantity
     * ---
     * When the virtual stock equals to or goes below the Min Quantity specified for this field, Odoo generates a
     * procurement to bring the forecasted quantity to the Max Quantity.
     * ---
     * Searchable : yes
     * Sortable : yes
     *
     * @var float
     */
    private $product_min_qty;

    /**
     * Maximum Quantity
     * ---
     * When the virtual stock goes below the Min Quantity, Odoo generates a procurement to bring the forecasted
     * quantity to the Quantity specified as Max Quantity.
     * ---
     * Searchable : yes
     * Sortable : yes
     *
     * @var float
     */
    private $product_max_qty;

    /**
     * Qty Multiple
     * ---
     * The procurement quantity will be rounded up to this multiple.  If it is 0, the exact quantity will be used.
     * ---
     * Searchable : yes
     * Sortable : yes
     *
     * @var float
     */
    private $qty_multiple;

    /**
     * Procurement Group
     * ---
     * Moves created through this orderpoint will be put in this procurement group. If none is given, the moves
     * generated by stock rules will be grouped into one big picking.
     * ---
     * Relation : many2one (procurement.group)
     * @see \Flux\OdooApiClient\Model\Object\Procurement\Group
     * ---
     * Searchable : yes
     * Sortable : yes
     *
     * @var OdooRelation|null
     */
    private $group_id;

    /**
     * Company
     * ---
     * Relation : many2one (res.company)
     * @see \Flux\OdooApiClient\Model\Object\Res\Company
     * ---
     * Searchable : yes
     * Sortable : yes
     *
     * @var OdooRelation
     */
    private $company_id;

    /**
     * Lead Time
     * ---
     * Number of days after the orderpoint is triggered to receive the products or to order to the vendor
     * ---
     * Searchable : yes
     * Sortable : yes
     *
     * @var int|null
     */
    private $lead_days;

    /**
     * Lead Type
     * ---
     * Selection : (default value, usually null)
     *     -> net (Days to get the products)
     *     -> supplier (Days to purchase)
     * ---
     * Searchable : yes
     * Sortable : yes
     *
     * @var string
     */
    private $lead_type;

    /**
     * Allowed Location
     * ---
     * Relation : one2many (stock.location)
     * @see \Flux\OdooApiClient\Model\Object\Stock\Location
     * ---
     * Searchable : no
     * Sortable : no
     *
     * @var OdooRelation[]|null
     */
    private $allowed_location_ids;

    /**
     * Created by
     * ---
     * Relation : many2one (res.users)
     * @see \Flux\OdooApiClient\Model\Object\Res\Users
     * ---
     * Searchable : yes
     * Sortable : yes
     *
     * @var OdooRelation|null
     */
    private $create_uid;

    /**
     * Created on
     * ---
     * Searchable : yes
     * Sortable : yes
     *
     * @var DateTimeInterface|null
     */
    private $create_date;

    /**
     * Last Updated by
     * ---
     * Relation : many2one (res.users)
     * @see \Flux\OdooApiClient\Model\Object\Res\Users
     * ---
     * Searchable : yes
     * Sortable : yes
     *
     * @var OdooRelation|null
     */
    private $write_uid;

    /**
     * Last Updated on
     * ---
     * Searchable : yes
     * Sortable : yes
     *
     * @var DateTimeInterface|null
     */
    private $write_date;

    /**
     * @param string $name Name
     *        ---
     *        Searchable : yes
     *        Sortable : yes
     * @param OdooRelation $warehouse_id Warehouse
     *        ---
     *        Relation : many2one (stock.warehouse)
     *        @see \Flux\OdooApiClient\Model\Object\Stock\Warehouse
     *        ---
     *        Searchable : yes
     *        Sortable : yes
     * @param OdooRelation $location_id Location
     *        ---
     *        Relation : many2one (stock.location)
     *        @see \Flux\OdooApiClient\Model\Object\Stock\Location
     *        ---
     *        Searchable : yes
     *        Sortable : yes
     * @param OdooRelation $product_id Product
     *        ---
     *        Relation : many2one (product.product)
     *        @see \Flux\OdooApiClient\Model\Object\Product\Product
     *        ---
     *        Searchable : yes
     *        Sortable : yes
     * @param OdooRelation $product_uom Unit of Measure
     *        ---
     *        Default unit of measure used for all stock operations.
     *        ---
     *        Relation : many2one (uom.uom)
     *        @see \Flux\OdooApiClient\Model\Object\Uom\Uom
     *        ---
     *        Searchable : yes
     *        Sortable : no
     * @param float $product_min_qty Minimum Quantity
     *        ---
     *        When the virtual stock equals to or goes below the Min Quantity specified for this field, Odoo generates a
     *        procurement to bring the forecasted quantity to the Max Quantity.
     *        ---
     *        Searchable : yes
     *        Sortable : yes
     * @param float $product_max_qty Maximum Quantity
     *        ---
     *        When the virtual stock goes below the Min Quantity, Odoo generates a procurement to bring the forecasted
     *        quantity to the Quantity specified as Max Quantity.
     *        ---
     *        Searchable : yes
     *        Sortable : yes
     * @param float $qty_multiple Qty Multiple
     *        ---
     *        The procurement quantity will be rounded up to this multiple.  If it is 0, the exact quantity will be used.
     *        ---
     *        Searchable : yes
     *        Sortable : yes
     * @param OdooRelation $company_id Company
     *        ---
     *        Relation : many2one (res.company)
     *        @see \Flux\OdooApiClient\Model\Object\Res\Company
     *        ---
     *        Searchable : yes
     *        Sortable : yes
     * @param string $lead_type Lead Type
     *        ---
     *        Selection : (default value, usually null)
     *            -> net (Days to get the products)
     *            -> supplier (Days to purchase)
     *        ---
     *        Searchable : yes
     *        Sortable : yes
     */
    public function __construct(
        string $name,
        OdooRelation $warehouse_id,
        OdooRelation $location_id,
        OdooRelation $product_id,
        OdooRelation $product_uom,
        float $product_min_qty,
        float $product_max_qty,
        float $qty_multiple,
        OdooRelation $company_id,
        string $lead_type
    ) {
        $this->name = $name;
        $this->warehouse_id = $warehouse_id;
        $this->location_id = $location_id;
        $this->product_id = $product_id;
        $this->product_uom = $product_uom;
        $this->product_min_qty = $product_min_qty;
        $this->product_max_qty = $product_max_qty;
        $this->qty_multiple = $qty_multiple;
        $this->company_id = $company_id;
        $this->lead_type = $lead_type;
    }

    /**
     * @param OdooRelation $item
     */
    public function addAllowedLocationIds(OdooRelation $item): void
    {
        if ($this->hasAllowedLocationIds($item)) {
            return;
        }

        if (null === $this->allowed_location_ids) {
            $this->allowed_location_ids = [];
        }

        $this->allowed_location_ids[] = $item;
    }

    /**
     * @param OdooRelation $company_id
     */
    public function setCompanyId(OdooRelation $company_id): void
    {
        $this->company_id = $company_id;
    }

    /**
     * @return int|null
     */
    public function getLeadDays(): ?int
    {
        return $this->lead_days;
    }

    /**
     * @param int|null $lead_days
     */
    public function setLeadDays(?int $lead_days): void
    {
        $this->lead_days = $lead_days;
    }

    /**
     * @return string
     */
    public function getLeadType(): string
    {
        return $this->lead_type;
    }

    /**
     * @param string $lead_type
     */
    public function setLeadType(string $lead_type): void
    {
        $this->lead_type = $lead_type;
    }

    /**
     * @return OdooRelation[]|null
     */
    public function getAllowedLocationIds(): ?array
    {
        return $this->allowed_location_ids;
    }

    /**
     * @param OdooRelation[]|null $allowed_location_ids
     */
    public function setAllowedLocationIds(?array $allowed_location_ids): void
    {
        $this->allowed_location_ids = $allowed_location_ids;
    }

    /**
     * @param OdooRelation $item
     *
     * @return bool
     */
    public function hasAllowedLocationIds(OdooRelation $item): bool
    {
        if (null === $this->allowed_location_ids) {
            return false;
        }

        return in_array($item, $this->allowed_location_ids);
    }

    /**
     * @param OdooRelation $item
     */
    public function removeAllowedLocationIds(OdooRelation $item): void
    {
        if (null === $this->allowed_location_ids) {
            $this->allowed_location_ids = [];
        }

        if ($this->hasAllowedLocationIds($item)) {
            $index = array_search($item, $this->allowed_location_ids);
            unset($this->allowed_location_ids[$index]);
        }
    }

    /**
     * @param OdooRelation|null $group_id
     */
    public function setGroupId(?OdooRelation $group_id): void
    {
        $this->group_id = $group_id;
    }

    /**
     * @return OdooRelation|null
     */
    public function getCreateUid(): ?OdooRelation
    {
        return $this->create_uid;
    }

    /**
     * @param OdooRelation|null $create_uid
     */
    public function setCreateUid(?OdooRelation $create_uid): void
    {
        $this->create_uid = $create_uid;
    }

    /**
     * @return DateTimeInterface|null
     */
    public function getCreateDate(): ?DateTimeInterface
    {
        return $this->create_date;
    }

    /**
     * @param DateTimeInterface|null $create_date
     */
    public function setCreateDate(?DateTimeInterface $create_date): void
    {
        $this->create_date = $create_date;
    }

    /**
     * @return OdooRelation|null
     */
    public function getWriteUid(): ?OdooRelation
    {
        return $this->write_uid;
    }

    /**
     * @param OdooRelation|null $write_uid
     */
    public function setWriteUid(?OdooRelation $write_uid): void
    {
        $this->write_uid = $write_uid;
    }

    /**
     * @return DateTimeInterface|null
     */
    public function getWriteDate(): ?DateTimeInterface
    {
        return $this->write_date;
    }

    /**
     * @param DateTimeInterface|null $write_date
     */
    public function setWriteDate(?DateTimeInterface $write_date): void
    {
        $this->write_date = $write_date;
    }

    /**
     * @return OdooRelation
     */
    public function getCompanyId(): OdooRelation
    {
        return $this->company_id;
    }

    /**
     * @return OdooRelation|null
     */
    public function getGroupId(): ?OdooRelation
    {
        return $this->group_id;
    }

    /**
     * @return string
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * @param OdooRelation $product_id
     */
    public function setProductId(OdooRelation $product_id): void
    {
        $this->product_id = $product_id;
    }

    /**
     * @param string $name
     */
    public function setName(string $name): void
    {
        $this->name = $name;
    }

    /**
     * @return bool|null
     */
    public function isActive(): ?bool
    {
        return $this->active;
    }

    /**
     * @param bool|null $active
     */
    public function setActive(?bool $active): void
    {
        $this->active = $active;
    }

    /**
     * @return OdooRelation
     */
    public function getWarehouseId(): OdooRelation
    {
        return $this->warehouse_id;
    }

    /**
     * @param OdooRelation $warehouse_id
     */
    public function setWarehouseId(OdooRelation $warehouse_id): void
    {
        $this->warehouse_id = $warehouse_id;
    }

    /**
     * @return OdooRelation
     */
    public function getLocationId(): OdooRelation
    {
        return $this->location_id;
    }

    /**
     * @param OdooRelation $location_id
     */
    public function setLocationId(OdooRelation $location_id): void
    {
        $this->location_id = $location_id;
    }

    /**
     * @return OdooRelation
     */
    public function getProductId(): OdooRelation
    {
        return $this->product_id;
    }

    /**
     * @return OdooRelation
     */
    public function getProductUom(): OdooRelation
    {
        return $this->product_uom;
    }

    /**
     * @param float $qty_multiple
     */
    public function setQtyMultiple(float $qty_multiple): void
    {
        $this->qty_multiple = $qty_multiple;
    }

    /**
     * @param OdooRelation $product_uom
     */
    public function setProductUom(OdooRelation $product_uom): void
    {
        $this->product_uom = $product_uom;
    }

    /**
     * @return string|null
     */
    public function getProductUomName(): ?string
    {
        return $this->product_uom_name;
    }

    /**
     * @param string|null $product_uom_name
     */
    public function setProductUomName(?string $product_uom_name): void
    {
        $this->product_uom_name = $product_uom_name;
    }

    /**
     * @return float
     */
    public function getProductMinQty(): float
    {
        return $this->product_min_qty;
    }

    /**
     * @param float $product_min_qty
     */
    public function setProductMinQty(float $product_min_qty): void
    {
        $this->product_min_qty = $product_min_qty;
    }

    /**
     * @return float
     */
    public function getProductMaxQty(): float
    {
        return $this->product_max_qty;
    }

    /**
     * @param float $product_max_qty
     */
    public function setProductMaxQty(float $product_max_qty): void
    {
        $this->product_max_qty = $product_max_qty;
    }

    /**
     * @return float
     */
    public function getQtyMultiple(): float
    {
        return $this->qty_multiple;
    }

    /**
     * @return string
     */
    public static function getOdooModelName(): string
    {
        return 'stock.warehouse.orderpoint';
    }
}
