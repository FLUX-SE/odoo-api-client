<?php

declare(strict_types=1);

namespace Flux\OdooApiClient\Model\Object\BaseImport;

use DateTimeInterface;
use Flux\OdooApiClient\Model\Object\Base;
use Flux\OdooApiClient\Model\Object\Res\Users;

/**
 * Odoo model : base_import.mapping
 * Name : base_import.mapping
 * Info :
 * mapping of previous column:field selections
 *
 * This is useful when repeatedly importing from a third-party
 * system: column names generated by the external system may
 * not match Odoo's field names or labels. This model is used
 * to save the mapping between column names and fields so that
 * next time a user imports from the same third-party systems
 * we can automatically match the columns to the correct field
 * without them having to re-enter the mapping every single
 * time.
 */
final class Mapping extends Base
{
    /**
     * Res Model
     *
     * @var null|string
     */
    private $res_model;

    /**
     * Column Name
     *
     * @var null|string
     */
    private $column_name;

    /**
     * Field Name
     *
     * @var null|string
     */
    private $field_name;

    /**
     * Created by
     *
     * @var null|Users
     */
    private $create_uid;

    /**
     * Created on
     *
     * @var null|DateTimeInterface
     */
    private $create_date;

    /**
     * Last Updated by
     *
     * @var null|Users
     */
    private $write_uid;

    /**
     * Last Updated on
     *
     * @var null|DateTimeInterface
     */
    private $write_date;

    /**
     * @param null|string $res_model
     */
    public function setResModel(?string $res_model): void
    {
        $this->res_model = $res_model;
    }

    /**
     * @param null|string $column_name
     */
    public function setColumnName(?string $column_name): void
    {
        $this->column_name = $column_name;
    }

    /**
     * @param null|string $field_name
     */
    public function setFieldName(?string $field_name): void
    {
        $this->field_name = $field_name;
    }

    /**
     * @return null|Users
     */
    public function getCreateUid(): ?Users
    {
        return $this->create_uid;
    }

    /**
     * @return null|DateTimeInterface
     */
    public function getCreateDate(): ?DateTimeInterface
    {
        return $this->create_date;
    }

    /**
     * @return null|Users
     */
    public function getWriteUid(): ?Users
    {
        return $this->write_uid;
    }

    /**
     * @return null|DateTimeInterface
     */
    public function getWriteDate(): ?DateTimeInterface
    {
        return $this->write_date;
    }
}
